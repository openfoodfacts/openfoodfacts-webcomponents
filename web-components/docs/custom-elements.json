{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/constants.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULT_ROBOTOFF_CONFIGURATION",
          "type": {
            "text": "object"
          },
          "default": "{\n  apiUrl: \"https://robotoff.openfoodfacts.org/api/v1\",\n  dryRun: false,\n  imgUrl: \"https://images.openfoodfacts.org/images/products\",\n}"
        },
        {
          "kind": "variable",
          "name": "PAGE_SIZE",
          "type": {
            "text": "number"
          },
          "default": "25"
        },
        {
          "kind": "variable",
          "name": "DEFAULT_LANGUAGE_CODE",
          "type": {
            "text": "string"
          },
          "default": "\"en\""
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULT_ROBOTOFF_CONFIGURATION",
          "declaration": {
            "name": "DEFAULT_ROBOTOFF_CONFIGURATION",
            "module": "src/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "PAGE_SIZE",
          "declaration": {
            "name": "PAGE_SIZE",
            "module": "src/constants.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_LANGUAGE_CODE",
          "declaration": {
            "name": "DEFAULT_LANGUAGE_CODE",
            "module": "src/constants.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/off-webcomponents.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "setLocale",
          "declaration": {
            "name": "setLocale",
            "module": "\"./localization\""
          }
        },
        {
          "kind": "js",
          "name": "getLocale",
          "declaration": {
            "name": "getLocale",
            "module": "\"./localization\""
          }
        },
        {
          "kind": "js",
          "name": "OffWebcomponentConfiguration",
          "declaration": {
            "name": "OffWebcomponentsConfiguration",
            "module": "\"./components/shared/off-webcomponents-configuration\""
          }
        },
        {
          "kind": "js",
          "name": "RobotoffQuestion",
          "declaration": {
            "name": "RobotoffQuestion",
            "module": "\"./components/robotoff-question/robotoff-question\""
          }
        },
        {
          "kind": "js",
          "name": "RobotoffNutrients",
          "declaration": {
            "name": "RobotoffNutrients",
            "module": "\"./components/robotoff-nutrients/robotoff-nutrients\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/api/robotoff.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "robotoff",
          "type": {
            "text": "object"
          },
          "default": "{\n  annotate,\n  annotateQuestion(insightId: string, annotation: QuestionAnnotationAnswer) {\n    const formBody = new URLSearchParams({\n      insight_id: insightId,\n      annotation: annotation,\n    }).toString()\n    return annotate(formBody)\n  },\n  annotateNutrients(annotation: InsightAnnotationAnswer) {\n    const formBody = new URLSearchParams({\n      annotation: \"2\",\n      insight_id: annotation.insightId,\n      data: JSON.stringify({\n        nutrients: annotation.data,\n      }),\n      type: annotation.type,\n    }).toString()\n    return annotate(formBody)\n  },\n\n  async questionsByProductCode(code: string, questionRequestParams: QuestionRequestParams = {}) {\n    if (!questionRequestParams.lang) {\n      questionRequestParams.lang = await getLocaleAfterInit()\n    }\n    const apiUrl = getApiUrl(`/questions/${code}`)\n    const url = addParamsToUrl(apiUrl, questionRequestParams)\n    const response = await fetch(url)\n    const result: QuestionsResponse = await response.json()\n    return result\n  },\n\n  async insights(requestParams: InsightsRequestParams = {}) {\n    const apiUrl = getApiUrl(\"/insights\")\n    const url = addParamsToUrl(apiUrl, requestParams)\n    const response = await fetch(url)\n    const result: InsightsResponse = await response.json()\n    return result\n  },\n}",
          "description": "Robotoff API"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "robotoff",
            "module": "src/api/robotoff.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/api/taxonomies.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/api/taxonomies.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/localization/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getBrowserLocale",
          "description": "Get the browser locale, it will keep only the language part"
        },
        {
          "kind": "variable",
          "name": "{ getLocale, setLocale }",
          "description": "Configure the localization, it will load the locale files and set the source and target locales"
        },
        {
          "kind": "variable",
          "name": "isLocaleSet",
          "type": {
            "text": "boolean"
          },
          "default": "false"
        },
        {
          "kind": "function",
          "name": "getLocaleAfterInit",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          },
          "description": "Get the locale if it's set or delay 100ms to get it"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getBrowserLocale",
          "declaration": {
            "name": "getBrowserLocale",
            "module": "src/localization/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "{ getLocale, setLocale }",
          "declaration": {
            "name": "{ getLocale, setLocale }",
            "module": "src/localization/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isLocaleSet",
          "declaration": {
            "name": "isLocaleSet",
            "module": "src/localization/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "getLocaleAfterInit",
          "declaration": {
            "name": "getLocaleAfterInit",
            "module": "src/localization/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/localization/translations.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getPluralTranslation",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "number | undefined | null"
              }
            },
            {
              "name": "singleTranslation",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pluralTranslation",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Utility functions to take the appropriate translation based on the value\nIf value is <= 1 or null or undefined, it will return the singleTranslation, otherwise the pluralTranslation",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getPluralTranslation",
          "declaration": {
            "name": "getPluralTranslation",
            "module": "src/localization/translations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/signals/nutrients.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "insightById",
          "default": "new SignalMap<Insight>({})",
          "description": "Nutrients insights by insight id"
        },
        {
          "kind": "variable",
          "name": "insightIdByProductCode",
          "default": "new SignalMap<string | null>({})",
          "description": "Nutrients insights id by product code"
        },
        {
          "kind": "function",
          "name": "insight",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Get the insight for a given product code",
          "return": {
            "type": {
              "text": "Computed<Insight | undefined>"
            }
          }
        },
        {
          "kind": "function",
          "name": "fetchInsightsByProductCode",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Fetch the incomplete nutrients insights for a given product code"
        },
        {
          "kind": "function",
          "name": "annotateNutrients",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "InsightAnnotationAnswer"
              }
            }
          ],
          "description": "Annotate an insight"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "insightById",
          "declaration": {
            "name": "insightById",
            "module": "src/signals/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "insightIdByProductCode",
          "declaration": {
            "name": "insightIdByProductCode",
            "module": "src/signals/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "insight",
          "declaration": {
            "name": "insight",
            "module": "src/signals/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "fetchInsightsByProductCode",
          "declaration": {
            "name": "fetchInsightsByProductCode",
            "module": "src/signals/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "annotateNutrients",
          "declaration": {
            "name": "annotateNutrients",
            "module": "src/signals/nutrients.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/signals/questions.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "questionsById",
          "default": "new SignalMap<Question>({})"
        },
        {
          "kind": "variable",
          "name": "questionIdsByProductCode",
          "default": "new SignalMap<string[]>({})"
        },
        {
          "kind": "variable",
          "name": "currentQuestionIndexByProductCode",
          "default": "new SignalMap<number>({})"
        },
        {
          "kind": "variable",
          "name": "isQuestionsFinishedByProductCode",
          "default": "new SignalMap<boolean>({})"
        },
        {
          "kind": "function",
          "name": "questions",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "currentQuestionIndex",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "hasQuestions",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Does the current product has questions"
        },
        {
          "kind": "function",
          "name": "numberOfQuestions",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Number of questions available"
        },
        {
          "kind": "function",
          "name": "isQuestionsFinished",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Indicates if all questions have been answered"
        },
        {
          "kind": "function",
          "name": "fetchQuestionsByProductCode",
          "parameters": [
            {
              "name": "code",
              "type": {
                "text": "string"
              },
              "description": "The product code."
            },
            {
              "name": "params",
              "default": "{}",
              "type": {
                "text": "QuestionRequestParams"
              },
              "description": "Additional parameters for the question request."
            }
          ],
          "description": "Fetches questions for a given product code."
        },
        {
          "kind": "function",
          "name": "checkIfQuestionsFinishedByProductCode",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Checks if all questions have been answered.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "answerQuestion",
          "parameters": [
            {
              "name": "insightId",
              "type": {
                "text": "string"
              },
              "description": "The ID of the insight."
            },
            {
              "name": "value",
              "type": {
                "text": "QuestionAnnotationAnswer"
              },
              "description": "The answer to the question."
            }
          ],
          "description": "Answers a question."
        },
        {
          "kind": "function",
          "name": "nextQuestionByProductCode",
          "parameters": [
            {
              "name": "productCode",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Moves to the next question.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "questionsById",
          "declaration": {
            "name": "questionsById",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "questionIdsByProductCode",
          "declaration": {
            "name": "questionIdsByProductCode",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "currentQuestionIndexByProductCode",
          "declaration": {
            "name": "currentQuestionIndexByProductCode",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "isQuestionsFinishedByProductCode",
          "declaration": {
            "name": "isQuestionsFinishedByProductCode",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "questions",
          "declaration": {
            "name": "questions",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "currentQuestionIndex",
          "declaration": {
            "name": "currentQuestionIndex",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "hasQuestions",
          "declaration": {
            "name": "hasQuestions",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberOfQuestions",
          "declaration": {
            "name": "numberOfQuestions",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "isQuestionsFinished",
          "declaration": {
            "name": "isQuestionsFinished",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "fetchQuestionsByProductCode",
          "declaration": {
            "name": "fetchQuestionsByProductCode",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "checkIfQuestionsFinishedByProductCode",
          "declaration": {
            "name": "checkIfQuestionsFinishedByProductCode",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "answerQuestion",
          "declaration": {
            "name": "answerQuestion",
            "module": "src/signals/questions.ts"
          }
        },
        {
          "kind": "js",
          "name": "nextQuestionByProductCode",
          "declaration": {
            "name": "nextQuestionByProductCode",
            "module": "src/signals/questions.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/signals/robotoff.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "robotoffConfiguration",
          "default": "new SignalObject<RobotoffConfigurationOptions>({\n  ...DEFAULT_ROBOTOFF_CONFIGURATION,\n})",
          "description": "Configuration for the robotoff web components"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "robotoffConfiguration",
          "declaration": {
            "name": "robotoffConfiguration",
            "module": "src/signals/robotoff.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/signals/taxonomies.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "nutrientTaxonomyById",
          "default": "new SignalMap<NutrientTaxonomy>({})",
          "description": "Store the taxonomies by id."
        },
        {
          "kind": "variable",
          "name": "nutrientTaxonomies",
          "default": "new Computed(() => {\n  const nutrientTaxonomyObj = nutrientTaxonomyById.get()\n  return Object.values(nutrientTaxonomyObj)\n})",
          "description": "Nutrient taxonomies"
        },
        {
          "kind": "function",
          "name": "getTaxonomyNameByLang",
          "parameters": [
            {
              "name": "taxonomy",
              "type": {
                "text": "NutrientTaxonomy"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Load the taxonomies if they are not already loaded.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "getTaxonomyNameByIdAndLang",
          "parameters": [
            {
              "name": "id",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lang",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Get the name of a taxonomy by its id and lang.\nIf the lang is not available, it returns the english name.\nIf the id is not available, it returns an empty string."
        },
        {
          "kind": "function",
          "name": "getTaxonomyUnitById",
          "return": {
            "type": {
              "text": "string | undefined"
            }
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Get the unit of a taxonomy by its id.\nIf the id is not available, it returns undefined."
        },
        {
          "kind": "function",
          "name": "fetchNutrientsTaxonomies",
          "description": "Fetch the nutrients taxonomies and store them in the signal.\nk"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "nutrientTaxonomyById",
          "declaration": {
            "name": "nutrientTaxonomyById",
            "module": "src/signals/taxonomies.ts"
          }
        },
        {
          "kind": "js",
          "name": "nutrientTaxonomies",
          "declaration": {
            "name": "nutrientTaxonomies",
            "module": "src/signals/taxonomies.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTaxonomyNameByLang",
          "declaration": {
            "name": "getTaxonomyNameByLang",
            "module": "src/signals/taxonomies.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTaxonomyNameByIdAndLang",
          "declaration": {
            "name": "getTaxonomyNameByIdAndLang",
            "module": "src/signals/taxonomies.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTaxonomyUnitById",
          "declaration": {
            "name": "getTaxonomyUnitById",
            "module": "src/signals/taxonomies.ts"
          }
        },
        {
          "kind": "js",
          "name": "fetchNutrientsTaxonomies",
          "declaration": {
            "name": "fetchNutrientsTaxonomies",
            "module": "src/signals/taxonomies.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/accessibility.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "VISUALLY_HIDDEN",
          "default": "css`\n  .visually-hidden {\n    position: absolute;\n    position: absolute !important;\n    width: 1px !important;\n    height: 1px !important;\n    padding: 0 !important;\n    margin: -1px !important;\n    overflow: hidden !important;\n    clip: rect(0, 0, 0, 0) !important;\n    white-space: nowrap !important;\n    border: 0 !important;\n  }\n`",
          "description": "Class to hide elements visually but keep them accessible for screen readers\nhttps://a11y-guidelines.orange.com/en/articles/accessible-hiding/"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VISUALLY_HIDDEN",
          "declaration": {
            "name": "VISUALLY_HIDDEN",
            "module": "src/styles/accessibility.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/base.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "BASE",
          "default": "css`\n  :host {\n    font-family: var(--font-family, \"Public Sans\", Helvetica, Roboto, Arial, sans-serif);\n  }\n`",
          "description": "Base styles for all components\n- Font family : It is necessary to import the font in the index.html file"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BASE",
          "declaration": {
            "name": "BASE",
            "module": "src/styles/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/buttons.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getDefaultButtonClasses",
          "return": {
            "type": {
              "text": "CSSResult"
            }
          }
        },
        {
          "kind": "variable",
          "name": "BUTTON_CLASS_BY_TYPE",
          "type": {
            "text": "Record<ButtonType, CSSResult>"
          },
          "default": "{\n  [ButtonType.Chocolate]: css`\n    .chocolate-button {\n      background-color: ${SAFE_CHOCOLATE};\n      border-color: ${SAFE_CHOCOLATE};\n      color: white;\n    }\n\n    .chocolate-button:hover {\n      background-color: white;\n      color: ${SAFE_CHOCOLATE};\n    }\n  `,\n  [ButtonType.Cappucino]: css`\n    .cappucino-button {\n      background-color: ${SAFE_CAPPUCINO};\n      border-color: ${SAFE_CAPPUCINO};\n      color: black;\n    }\n\n    .cappucino-button:hover {\n      background-color: white;\n    }\n  `,\n  [ButtonType.ChocolateOutline]: css`\n    .chocolate-button-outline {\n      background-color: transparent;\n      border-color: ${SAFE_CHOCOLATE};\n      color: ${SAFE_CHOCOLATE};\n    }\n\n    .chocolate-button-outline:hover {\n      background-color: ${SAFE_CHOCOLATE};\n      color: white;\n    }\n  `,\n  [ButtonType.White]: css`\n    .white-button {\n      background-color: white;\n      border-color: white;\n      color: black;\n    }\n\n    .white-button:hover {\n      border-color: black;\n      background-color: black;\n      color: white;\n    }\n  `,\n  [ButtonType.LINK]: css`\n    .link-button {\n      text-decoration: none;\n      background-color: transparent;\n      border-color: transparent;\n      cursor: pointer;\n      color: black;\n    }\n\n    .link-button:hover {\n      text-decoration: underline;\n    }\n  `,\n}"
        },
        {
          "kind": "function",
          "name": "getButtonClasses",
          "return": {
            "type": {
              "text": "CSSResult[]"
            }
          },
          "parameters": [
            {
              "name": "types",
              "type": {
                "text": "ButtonType[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDefaultButtonClasses",
          "declaration": {
            "name": "getDefaultButtonClasses",
            "module": "src/styles/buttons.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_CLASS_BY_TYPE",
          "declaration": {
            "name": "BUTTON_CLASS_BY_TYPE",
            "module": "src/styles/buttons.ts"
          }
        },
        {
          "kind": "js",
          "name": "getButtonClasses",
          "declaration": {
            "name": "getButtonClasses",
            "module": "src/styles/buttons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/form.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SELECT",
          "default": "css`\n  .select {\n    width: 100%;\n    appearance: none;\n    -webkit-appearance: none !important;\n    -moz-appearance: none !important;\n    background-color: #fafafa;\n    background-image: url(\"assets/carret-bottom.svg\");\n    background-position: 100% center;\n    background-repeat: no-repeat;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #ccc;\n    color: rgba(0, 0, 0, 0.75);\n    line-height: normal;\n    padding: 0.25rem 0.5rem;\n    border-radius: 0;\n  }\n`"
        },
        {
          "kind": "variable",
          "name": "INPUT",
          "default": "css`\n  .input,\n  .input-number {\n    width: 100%;\n    background-color: #fafafa;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #ccc;\n    color: rgba(0, 0, 0, 0.75);\n    line-height: normal;\n    padding: 0.25rem 0.5rem;\n    border-radius: 0;\n    appearance: none;\n    -webkit-appearance: none !important;\n  }\n\n  .input {\n    -moz-appearance: none !important;\n  }\n\n  .input-number::-webkit-outer-spin-button,\n  .input-number::-webkit-inner-spin-button {\n    /* display: none; <- Crashes Chrome on hover */\n    -webkit-appearance: none;\n    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n  }\n\n  .input-number {\n    padding: 0.25rem 0.5rem;\n    -moz-appearance: textfield !important;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SELECT",
          "declaration": {
            "name": "SELECT",
            "module": "src/styles/form.ts"
          }
        },
        {
          "kind": "js",
          "name": "INPUT",
          "declaration": {
            "name": "INPUT",
            "module": "src/styles/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/utils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FLEX",
          "default": "css`\n  .flex {\n    display: flex;\n  }\n  .flex-col {\n    flex-direction: column;\n  }\n  .justify-center {\n    justify-content: center;\n  }\n  .justify-between {\n    justify-content: space-between;\n  }\n  .justify-end {\n    justify-content: flex-end;\n  }\n  .align-center {\n    align-items: center;\n  }\n  .gap-0_5 {\n    gap: 0.5rem;\n  }\n  .gap-1 {\n    gap: 1rem;\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FLEX",
          "declaration": {
            "name": "FLEX",
            "module": "src/styles/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/test/off-webcomponents_test.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/types/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/types/robotoff.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/types/taxonomies.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/colors.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CHOCOLATE",
          "type": {
            "text": "string"
          },
          "default": "\"#341100\""
        },
        {
          "kind": "variable",
          "name": "CAPPUCINO",
          "type": {
            "text": "string"
          },
          "default": "\"#ede0db\""
        },
        {
          "kind": "variable",
          "name": "LIGHT_GREY",
          "type": {
            "text": "string"
          },
          "default": "\"#f0f0f0\""
        },
        {
          "kind": "variable",
          "name": "SAFE_CAPPUCINO"
        },
        {
          "kind": "variable",
          "name": "SAFE_CHOCOLATE"
        },
        {
          "kind": "variable",
          "name": "SAFE_LIGHT_GREY"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CHOCOLATE",
          "declaration": {
            "name": "CHOCOLATE",
            "module": "src/utils/colors.ts"
          }
        },
        {
          "kind": "js",
          "name": "CAPPUCINO",
          "declaration": {
            "name": "CAPPUCINO",
            "module": "src/utils/colors.ts"
          }
        },
        {
          "kind": "js",
          "name": "LIGHT_GREY",
          "declaration": {
            "name": "LIGHT_GREY",
            "module": "src/utils/colors.ts"
          }
        },
        {
          "kind": "js",
          "name": "SAFE_CAPPUCINO",
          "declaration": {
            "name": "SAFE_CAPPUCINO",
            "module": "src/utils/colors.ts"
          }
        },
        {
          "kind": "js",
          "name": "SAFE_CHOCOLATE",
          "declaration": {
            "name": "SAFE_CHOCOLATE",
            "module": "src/utils/colors.ts"
          }
        },
        {
          "kind": "js",
          "name": "SAFE_LIGHT_GREY",
          "declaration": {
            "name": "SAFE_LIGHT_GREY",
            "module": "src/utils/colors.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "reformatValueTag",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeEmptyKeys",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, any>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "sleep",
          "parameters": [
            {
              "name": "ms",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "capitaliseName",
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "string | undefined"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "paramsToUrl",
          "parameters": [
            {
              "name": "params",
              "type": {
                "text": "Record<string, any>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addParamsToUrl",
          "parameters": [
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "params",
              "type": {
                "text": "Record<string, any>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "delay",
          "parameters": [
            {
              "name": "ms",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isNullOrUndefined",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "reformatValueTag",
          "declaration": {
            "name": "reformatValueTag",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeEmptyKeys",
          "declaration": {
            "name": "removeEmptyKeys",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "sleep",
          "declaration": {
            "name": "sleep",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "capitaliseName",
          "declaration": {
            "name": "capitaliseName",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "paramsToUrl",
          "declaration": {
            "name": "paramsToUrl",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "addParamsToUrl",
          "declaration": {
            "name": "addParamsToUrl",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "delay",
          "declaration": {
            "name": "delay",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isNullOrUndefined",
          "declaration": {
            "name": "isNullOrUndefined",
            "module": "src/utils/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/nutrients.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "EDITABLE_UNITS",
          "type": {
            "text": "array"
          },
          "default": "[Unit.GRAMS, Unit.MILIGRAMS, Unit.MICROGRAMS]"
        },
        {
          "kind": "variable",
          "name": "NUTRIENT_SERVING_SIZE_KEY",
          "type": {
            "text": "string"
          },
          "default": "\"serving_size\""
        },
        {
          "kind": "variable",
          "name": "NUTRIENT_SUFFIX",
          "type": {
            "text": "Record<InsightAnnotationType, NutrientSuffix>"
          },
          "default": "{\n  [InsightAnnotationType.CENTGRAMS]: \"_100g\",\n  [InsightAnnotationType.SERVING]: \"_serving\",\n}"
        },
        {
          "kind": "variable",
          "name": "FORCED_UNITS_BY_NUTRIENTS_KEYS",
          "type": {
            "text": "object"
          },
          "default": "{\n  [ForcedNutrientKey.ENERGY_KJ]: Unit.KILOJOULES,\n  [ForcedNutrientKey.ENERGY_KCAL]: Unit.KILOCALORIES,\n  [ForcedNutrientKey.ENERGY_FROM_FAT]: Unit.KILOJOULES,\n}"
        },
        {
          "kind": "function",
          "name": "getPossibleUnits",
          "parameters": [
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "description": "the nutrient key"
            },
            {
              "name": "unit",
              "optional": true,
              "type": {
                "text": "string | null"
              },
              "description": "the unit to check if it is forced or not.\nFor example, if the unit is \"kj\", it will return [\"kj\"]."
            }
          ],
          "description": "get the possible units for a nutrient key",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "NUTRIENT_UNIT_NAME_PREFIX",
          "type": {
            "text": "string"
          },
          "default": "\"unit__\""
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EDITABLE_UNITS",
          "declaration": {
            "name": "EDITABLE_UNITS",
            "module": "src/utils/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "NUTRIENT_SERVING_SIZE_KEY",
          "declaration": {
            "name": "NUTRIENT_SERVING_SIZE_KEY",
            "module": "src/utils/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "NUTRIENT_SUFFIX",
          "declaration": {
            "name": "NUTRIENT_SUFFIX",
            "module": "src/utils/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "FORCED_UNITS_BY_NUTRIENTS_KEYS",
          "declaration": {
            "name": "FORCED_UNITS_BY_NUTRIENTS_KEYS",
            "module": "src/utils/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPossibleUnits",
          "declaration": {
            "name": "getPossibleUnits",
            "module": "src/utils/nutrients.ts"
          }
        },
        {
          "kind": "js",
          "name": "NUTRIENT_UNIT_NAME_PREFIX",
          "declaration": {
            "name": "NUTRIENT_UNIT_NAME_PREFIX",
            "module": "src/utils/nutrients.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/signals.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SignalObject",
          "members": [
            {
              "kind": "method",
              "name": "getItem",
              "return": {
                "type": {
                  "text": "T[keyof T]"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setItem",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "T[keyof T]"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "State",
            "package": "@lit-labs/signals"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "SignalMap",
          "superclass": {
            "name": "SignalObject",
            "module": "src/utils/signals.ts"
          },
          "members": [
            {
              "kind": "method",
              "name": "getItem",
              "return": {
                "type": {
                  "text": "T[keyof T]"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SignalObject",
                "module": "src/utils/signals.ts"
              }
            },
            {
              "kind": "method",
              "name": "setItem",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "T[keyof T]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SignalObject",
                "module": "src/utils/signals.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SignalObject",
          "declaration": {
            "name": "SignalObject",
            "module": "src/utils/signals.ts"
          }
        },
        {
          "kind": "js",
          "name": "SignalMap",
          "declaration": {
            "name": "SignalMap",
            "module": "src/utils/signals.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/buttons/zoom-unzoom-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZoomUnzoomButton",
          "members": [
            {
              "kind": "field",
              "name": "zoomed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "zoomed"
            }
          ],
          "events": [
            {
              "description": "Fired when the button is clicked",
              "name": "click"
            }
          ],
          "attributes": [
            {
              "name": "zoomed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "zoomed"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zoom-unzoom-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZoomUnzoomButton",
          "declaration": {
            "name": "ZoomUnzoomButton",
            "module": "src/components/buttons/zoom-unzoom-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zoom-unzoom-button",
          "declaration": {
            "name": "ZoomUnzoomButton",
            "module": "src/components/buttons/zoom-unzoom-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icons/rotate-left.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Rotate left icon",
          "name": "RotateLeftIcon",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rotate-left-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "rotate-left-icon",
          "declaration": {
            "name": "RotateLeftIcon",
            "module": "src/components/icons/rotate-left.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icons/rotate-right.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Rotate right icon",
          "name": "RotateRightIcon",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rotate-right-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RotateRightIcon",
          "declaration": {
            "name": "RotateRightIcon",
            "module": "src/components/icons/rotate-right.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rotate-right-icon",
          "declaration": {
            "name": "RotateRightIcon",
            "module": "src/components/icons/rotate-right.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icons/unzoom.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays a unzoom icon.",
          "name": "UnzoomIcon",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "unzoom-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnzoomIcon",
          "declaration": {
            "name": "UnzoomIcon",
            "module": "src/components/icons/unzoom.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "unzoom-icon",
          "declaration": {
            "name": "UnzoomIcon",
            "module": "src/components/icons/unzoom.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icons/zoom.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component that displays a zoom icon.",
          "name": "ZoomIcon",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "tagName": "zoom-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZoomIcon",
          "declaration": {
            "name": "ZoomIcon",
            "module": "src/components/icons/zoom.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zoom-icon",
          "declaration": {
            "name": "ZoomIcon",
            "module": "src/components/icons/zoom.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/robotoff-question/robotoff-question-form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "RobotoffQuestionForm component\nIt displays a form to answer a question about a product.",
          "name": "RobotoffQuestionForm",
          "members": [
            {
              "kind": "field",
              "name": "question",
              "type": {
                "text": "Question | undefined"
              },
              "description": "The question to display.",
              "attribute": "question",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_zoomed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "The image size is zoomed or not."
            },
            {
              "kind": "field",
              "name": "emitEventClick",
              "privacy": "private",
              "description": "Emit an event submit when the user clicks on a button.\nIt stops the propagation of the event to avoid the click event on the parent."
            },
            {
              "kind": "field",
              "name": "_annotateProduct",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleImageSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderImage",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "EventType.SUBMIT"
              },
              "description": "When the form is submitted",
              "name": ""
            }
          ],
          "attributes": [
            {
              "name": "question",
              "type": {
                "text": "Question | undefined"
              },
              "description": "The question to display.",
              "fieldName": "question"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "robotoff-question-form",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RobotoffQuestionForm",
          "declaration": {
            "name": "RobotoffQuestionForm",
            "module": "src/components/robotoff-question/robotoff-question-form.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "robotoff-question-form",
          "declaration": {
            "name": "RobotoffQuestionForm",
            "module": "src/components/robotoff-question/robotoff-question-form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/robotoff-question/robotoff-question.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Robotoff question component",
          "name": "RobotoffQuestion",
          "members": [
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "description": "Options for the component",
              "attribute": "options",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "productCode",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The product code to fetch questions for",
              "attribute": "product-code"
            },
            {
              "kind": "field",
              "name": "insightTypes",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The insight types to filter questions separate by comma",
              "attribute": "insight-types"
            },
            {
              "kind": "field",
              "name": "hasAnswered",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether the user has answered the question"
            },
            {
              "kind": "field",
              "name": "_questionsTask",
              "privacy": "private",
              "default": "new Task(this, {\n    task: async ([productCode, insightTypes], {}) => {\n      this.hasAnswered = false\n      if (!productCode) {\n        return []\n      }\n      const params = insightTypes ? { insight_types: insightTypes } : {}\n\n      await fetchQuestionsByProductCode(productCode, params)\n      this._emitQuestionStateEvent()\n      return questions(productCode).get()\n    },\n    args: () => [this.productCode, this.insightTypes],\n  })",
              "description": "Task to fetch questions for the given product code",
              "type": {
                "text": "Task"
              }
            },
            {
              "kind": "field",
              "name": "_emitQuestionStateEvent",
              "privacy": "private",
              "description": "Emit a custom event when the question state changes to know current state outside the component",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "onQuestionAnswered",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderMessage",
              "privacy": "private",
              "description": "Render the message to display to the user",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "EventType.QUESTION_STATE"
              },
              "description": "When the state of the question changes",
              "name": ""
            }
          ],
          "attributes": [
            {
              "name": "options",
              "type": {
                "text": "Object"
              },
              "default": "{}",
              "description": "Options for the component",
              "fieldName": "options"
            },
            {
              "name": "product-code",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The product code to fetch questions for",
              "fieldName": "productCode"
            },
            {
              "name": "insight-types",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The insight types to filter questions separate by comma",
              "fieldName": "insightTypes"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@lit-labs/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "robotoff-question",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RobotoffQuestion",
          "declaration": {
            "name": "RobotoffQuestion",
            "module": "src/components/robotoff-question/robotoff-question.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "robotoff-question",
          "declaration": {
            "name": "RobotoffQuestion",
            "module": "src/components/robotoff-question/robotoff-question.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/robotoff-nutrients/robotoff-nutrients-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Display a table of nutrients for a given product",
          "name": "RobotoffNutrientsTable",
          "members": [
            {
              "kind": "field",
              "name": "insight",
              "type": {
                "text": "Insight | undefined"
              },
              "description": "The insight to edit",
              "attribute": "insight"
            },
            {
              "kind": "field",
              "name": "insightAnnotationType",
              "type": {
                "text": "InsightAnnotationType"
              },
              "description": "Insight type"
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "Record<string, string>"
              },
              "privacy": "private",
              "default": "{}",
              "description": "Error message by key"
            },
            {
              "kind": "field",
              "name": "_addedNutrientKey",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Nutrient keys that were added to the table"
            },
            {
              "kind": "field",
              "name": "_servingSizeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\"",
              "description": "Serving size value to display"
            },
            {
              "kind": "field",
              "name": "onUpdateInsight",
              "description": "Update properties when the insight is updated"
            },
            {
              "kind": "method",
              "name": "getFormatedNutrients",
              "return": {
                "type": {
                  "text": "FormatedNutrients"
                }
              },
              "description": "Get the nutrients in a formated way to manipulate it easily in the template"
            },
            {
              "kind": "field",
              "name": "getInputValueName"
            },
            {
              "kind": "field",
              "name": "getInputUnitName"
            },
            {
              "kind": "field",
              "name": "getServingSizeInputName"
            },
            {
              "kind": "field",
              "name": "getServingSizeValue"
            },
            {
              "kind": "method",
              "name": "renderRows",
              "parameters": [
                {
                  "name": "nutrients",
                  "type": {
                    "text": "FormatedNutrients"
                  },
                  "description": "The nutrients to render"
                }
              ],
              "description": "Render the inputs for the given nutrient key and column",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "renderUnit",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The key of the nutrient."
                },
                {
                  "name": "column",
                  "type": {
                    "text": "InsightAnnotationType"
                  },
                  "description": "The column of the nutrient."
                },
                {
                  "name": "nutrient",
                  "type": {
                    "text": "Pick<InsightDatum, \"unit\"> | undefined"
                  },
                  "description": "The nutrient to render."
                }
              ],
              "description": "Render the unit input for the given key and column.\nWe use a method instead a component to have input in form data when submitting.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "renderInputs",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The key of the nutrient."
                },
                {
                  "name": "column",
                  "type": {
                    "text": "InsightAnnotationType"
                  },
                  "description": "The column of the nutrient."
                },
                {
                  "name": "nutrient",
                  "type": {
                    "text": "Pick<InsightDatum, \"value\" | \"unit\"> | undefined"
                  },
                  "description": "The nutrient to render."
                }
              ],
              "description": "Render the nutrient value inputs for the given key and column.\nWe use a method instead a component to have input in form data when submitting.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "emitSubmitEvent",
              "parameters": [
                {
                  "name": "insightAnnotationAnswer",
                  "type": {
                    "text": "InsightAnnotationAnswer"
                  }
                }
              ],
              "description": "Emit a custom submit event to submit the form data well formatted."
            },
            {
              "kind": "method",
              "name": "isUnitInput",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateInputValue",
              "return": {
                "type": {
                  "text": "{\n    error?: string\n    value?: string\n  }"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "description": "Validate the input value."
            },
            {
              "kind": "method",
              "name": "validateFormData",
              "return": {
                "type": {
                  "text": "{\n    isValid: boolean\n    validatedData: InsightAnnotatationData\n  }"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "InsightAnnotatationData"
                  }
                }
              ],
              "description": "Validate the form data.\nIt will return the form data well formatted."
            },
            {
              "kind": "method",
              "name": "submitFormData",
              "parameters": [
                {
                  "name": "formData",
                  "type": {
                    "text": "FormData"
                  }
                },
                {
                  "name": "column",
                  "type": {
                    "text": "InsightAnnotationType"
                  }
                }
              ],
              "description": "Submit the form data.\nIt will send the data to the server."
            },
            {
              "kind": "method",
              "name": "onInsightAnnotationTypeChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handle the change event of the annotation type selection.\nIt will update the annotation type."
            },
            {
              "kind": "method",
              "name": "renderSubmitRow",
              "description": "Render the submit row.\nIt will render a submit button."
            },
            {
              "kind": "method",
              "name": "onChangeServingSize",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderServingSizeInput",
              "parameters": [
                {
                  "name": "nutrients",
                  "type": {
                    "text": "FormatedNutrients"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInsightAnnotationTypeSelection",
              "description": "Render the annotation type selection.\nIt will render a radio button for each annotation type."
            },
            {
              "kind": "method",
              "name": "onAddNutrient",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSubmit",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ],
              "description": "Handle the form submission.\nIt will emit a custom submit event to submit the form data well formatted.\nIt only sent the data for the column that was submitted."
            },
            {
              "kind": "method",
              "name": "renderAddNutrientRow",
              "parameters": [
                {
                  "name": "alreadyAddedNutrients",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Render the row to add a new nutrient."
            },
            {
              "kind": "method",
              "name": "renderTable",
              "parameters": [
                {
                  "name": "nutrients",
                  "type": {
                    "text": "FormatedNutrients"
                  }
                }
              ],
              "description": "Render the table with the nutrients data."
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "when the user submit the form",
              "name": "submit"
            }
          ],
          "attributes": [
            {
              "name": "insight",
              "type": {
                "text": "Insight | undefined"
              },
              "description": "The insight to edit",
              "fieldName": "insight"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "robotoff-nutrients-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RobotoffNutrientsTable",
          "declaration": {
            "name": "RobotoffNutrientsTable",
            "module": "src/components/robotoff-nutrients/robotoff-nutrients-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "robotoff-nutrients-table",
          "declaration": {
            "name": "RobotoffNutrientsTable",
            "module": "src/components/robotoff-nutrients/robotoff-nutrients-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/robotoff-nutrients/robotoff-nutrients.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Robotoff Nutrients component",
          "name": "RobotoffNutrients",
          "members": [
            {
              "kind": "field",
              "name": "productCode",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The product code to get the insights for",
              "attribute": "product-code"
            },
            {
              "kind": "field",
              "name": "showMessages",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show messages",
              "attribute": "show-messages"
            },
            {
              "kind": "field",
              "name": "isSubmited",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Is the form submited"
            },
            {
              "kind": "field",
              "name": "showSuccessMessage",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show success message"
            },
            {
              "kind": "field",
              "name": "showImage",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Do we show the image of the product by default",
              "attribute": "show-image"
            },
            {
              "kind": "field",
              "name": "_insightsTask",
              "privacy": "private",
              "default": "new Task(this, {\n    task: async ([productCode], {}) => {\n      if (!productCode) {\n        return []\n      }\n\n      await Promise.all([fetchInsightsByProductCode(productCode), fetchNutrientsTaxonomies()])\n      return insight(productCode).get()\n    },\n    args: () => [this.productCode],\n  })",
              "description": "Task to get the insights for the given product code\nit will fetch the incomplete nutrients insights and the nutrients taxonomies",
              "type": {
                "text": "Task"
              }
            },
            {
              "kind": "field",
              "name": "onSubmit",
              "description": "Annotate the nutrients insights",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderMessages",
              "description": "Render messages",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "hideImage"
            },
            {
              "kind": "method",
              "name": "displayImage"
            },
            {
              "kind": "method",
              "name": "renderImage",
              "parameters": [
                {
                  "name": "insight",
                  "type": {
                    "text": "Insight"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "product-code",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The product code to get the insights for",
              "fieldName": "productCode"
            },
            {
              "name": "show-messages",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show messages",
              "fieldName": "showMessages"
            },
            {
              "name": "show-image",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Do we show the image of the product by default",
              "fieldName": "showImage"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "robotoff-nutrients",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RobotoffNutrients",
          "declaration": {
            "name": "RobotoffNutrients",
            "module": "src/components/robotoff-nutrients/robotoff-nutrients.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "robotoff-nutrients",
          "declaration": {
            "name": "RobotoffNutrients",
            "module": "src/components/robotoff-nutrients/robotoff-nutrients.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/localization/generated/locale-codes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "sourceLocale",
          "default": "`en`",
          "description": "The locale code that templates in this source code are written in."
        },
        {
          "kind": "variable",
          "name": "targetLocales",
          "type": {
            "text": "[\n  `af`,\n  `am`,\n  `ar`,\n  `ay`,\n  `az`,\n  `be`,\n  `bg`,\n  `bi`,\n  `bn`,\n  `bs`,\n  `ca`,\n  `ch`,\n  `cs`,\n  `cy`,\n  `da`,\n  `de`,\n  `dv`,\n  `dz`,\n  `el`,\n  `es`,\n  `et`,\n  `eu`,\n  `fa`,\n  `fi`,\n  `fj`,\n  `fr`,\n  `ga`,\n  `gd`,\n  `gl`,\n  `gn`,\n  `gv`,\n  `he`,\n  `hi`,\n  `ho`,\n  `hr`,\n  `ht`,\n  `hu`,\n  `hy`,\n  `id`,\n  `is`,\n  `it`,\n  `ja`,\n  `ka`,\n  `kk`,\n  `kl`,\n  `km`,\n  `ko`,\n  `ku`,\n  `ky`,\n  `la`,\n  `lb`,\n  `lo`,\n  `lt`,\n  `lv`,\n  `mg`,\n  `mh`,\n  `mi`,\n  `mk`,\n  `mn`,\n  `ms`,\n  `mt`,\n  `my`,\n  `na`,\n  `nb`,\n  `nd`,\n  `ne`,\n  `nl`,\n  `nr`,\n  `ny`,\n  `pap`,\n  `pl`,\n  `prs`,\n  `ps`,\n  `pt`,\n  `qu`,\n  `rn`,\n  `ro`,\n  `ru`,\n  `rw`,\n  `sg`,\n  `si`,\n  `sk`,\n  `sl`,\n  `sm`,\n  `sn`,\n  `so`,\n  `sq`,\n  `sr`,\n  `ss`,\n  `st`,\n  `sv`,\n  `sw`,\n  `ta`,\n  `tg`,\n  `th`,\n  `ti`,\n  `tk`,\n  `tl`,\n  `tn`,\n  `to`,\n  `tr`,\n  `ts`,\n  `uk`,\n  `ur`,\n  `uz`,\n  `ve`,\n  `vi`,\n  `xh`,\n  `zh`,\n  `zu`,\n]"
          },
          "default": "[\n  `af`,\n  `am`,\n  `ar`,\n  `ay`,\n  `az`,\n  `be`,\n  `bg`,\n  `bi`,\n  `bn`,\n  `bs`,\n  `ca`,\n  `ch`,\n  `cs`,\n  `cy`,\n  `da`,\n  `de`,\n  `dv`,\n  `dz`,\n  `el`,\n  `es`,\n  `et`,\n  `eu`,\n  `fa`,\n  `fi`,\n  `fj`,\n  `fr`,\n  `ga`,\n  `gd`,\n  `gl`,\n  `gn`,\n  `gv`,\n  `he`,\n  `hi`,\n  `ho`,\n  `hr`,\n  `ht`,\n  `hu`,\n  `hy`,\n  `id`,\n  `is`,\n  `it`,\n  `ja`,\n  `ka`,\n  `kk`,\n  `kl`,\n  `km`,\n  `ko`,\n  `ku`,\n  `ky`,\n  `la`,\n  `lb`,\n  `lo`,\n  `lt`,\n  `lv`,\n  `mg`,\n  `mh`,\n  `mi`,\n  `mk`,\n  `mn`,\n  `ms`,\n  `mt`,\n  `my`,\n  `na`,\n  `nb`,\n  `nd`,\n  `ne`,\n  `nl`,\n  `nr`,\n  `ny`,\n  `pap`,\n  `pl`,\n  `prs`,\n  `ps`,\n  `pt`,\n  `qu`,\n  `rn`,\n  `ro`,\n  `ru`,\n  `rw`,\n  `sg`,\n  `si`,\n  `sk`,\n  `sl`,\n  `sm`,\n  `sn`,\n  `so`,\n  `sq`,\n  `sr`,\n  `ss`,\n  `st`,\n  `sv`,\n  `sw`,\n  `ta`,\n  `tg`,\n  `th`,\n  `ti`,\n  `tk`,\n  `tl`,\n  `tn`,\n  `to`,\n  `tr`,\n  `ts`,\n  `uk`,\n  `ur`,\n  `uz`,\n  `ve`,\n  `vi`,\n  `xh`,\n  `zh`,\n  `zu`,\n]",
          "description": "The other locale codes that this application is localized into. Sorted\nlexicographically."
        },
        {
          "kind": "variable",
          "name": "allLocales",
          "type": {
            "text": "[\n  `af`,\n  `am`,\n  `ar`,\n  `ay`,\n  `az`,\n  `be`,\n  `bg`,\n  `bi`,\n  `bn`,\n  `bs`,\n  `ca`,\n  `ch`,\n  `cs`,\n  `cy`,\n  `da`,\n  `de`,\n  `dv`,\n  `dz`,\n  `el`,\n  `en`,\n  `es`,\n  `et`,\n  `eu`,\n  `fa`,\n  `fi`,\n  `fj`,\n  `fr`,\n  `ga`,\n  `gd`,\n  `gl`,\n  `gn`,\n  `gv`,\n  `he`,\n  `hi`,\n  `ho`,\n  `hr`,\n  `ht`,\n  `hu`,\n  `hy`,\n  `id`,\n  `is`,\n  `it`,\n  `ja`,\n  `ka`,\n  `kk`,\n  `kl`,\n  `km`,\n  `ko`,\n  `ku`,\n  `ky`,\n  `la`,\n  `lb`,\n  `lo`,\n  `lt`,\n  `lv`,\n  `mg`,\n  `mh`,\n  `mi`,\n  `mk`,\n  `mn`,\n  `ms`,\n  `mt`,\n  `my`,\n  `na`,\n  `nb`,\n  `nd`,\n  `ne`,\n  `nl`,\n  `nr`,\n  `ny`,\n  `pap`,\n  `pl`,\n  `prs`,\n  `ps`,\n  `pt`,\n  `qu`,\n  `rn`,\n  `ro`,\n  `ru`,\n  `rw`,\n  `sg`,\n  `si`,\n  `sk`,\n  `sl`,\n  `sm`,\n  `sn`,\n  `so`,\n  `sq`,\n  `sr`,\n  `ss`,\n  `st`,\n  `sv`,\n  `sw`,\n  `ta`,\n  `tg`,\n  `th`,\n  `ti`,\n  `tk`,\n  `tl`,\n  `tn`,\n  `to`,\n  `tr`,\n  `ts`,\n  `uk`,\n  `ur`,\n  `uz`,\n  `ve`,\n  `vi`,\n  `xh`,\n  `zh`,\n  `zu`,\n]"
          },
          "default": "[\n  `af`,\n  `am`,\n  `ar`,\n  `ay`,\n  `az`,\n  `be`,\n  `bg`,\n  `bi`,\n  `bn`,\n  `bs`,\n  `ca`,\n  `ch`,\n  `cs`,\n  `cy`,\n  `da`,\n  `de`,\n  `dv`,\n  `dz`,\n  `el`,\n  `en`,\n  `es`,\n  `et`,\n  `eu`,\n  `fa`,\n  `fi`,\n  `fj`,\n  `fr`,\n  `ga`,\n  `gd`,\n  `gl`,\n  `gn`,\n  `gv`,\n  `he`,\n  `hi`,\n  `ho`,\n  `hr`,\n  `ht`,\n  `hu`,\n  `hy`,\n  `id`,\n  `is`,\n  `it`,\n  `ja`,\n  `ka`,\n  `kk`,\n  `kl`,\n  `km`,\n  `ko`,\n  `ku`,\n  `ky`,\n  `la`,\n  `lb`,\n  `lo`,\n  `lt`,\n  `lv`,\n  `mg`,\n  `mh`,\n  `mi`,\n  `mk`,\n  `mn`,\n  `ms`,\n  `mt`,\n  `my`,\n  `na`,\n  `nb`,\n  `nd`,\n  `ne`,\n  `nl`,\n  `nr`,\n  `ny`,\n  `pap`,\n  `pl`,\n  `prs`,\n  `ps`,\n  `pt`,\n  `qu`,\n  `rn`,\n  `ro`,\n  `ru`,\n  `rw`,\n  `sg`,\n  `si`,\n  `sk`,\n  `sl`,\n  `sm`,\n  `sn`,\n  `so`,\n  `sq`,\n  `sr`,\n  `ss`,\n  `st`,\n  `sv`,\n  `sw`,\n  `ta`,\n  `tg`,\n  `th`,\n  `ti`,\n  `tk`,\n  `tl`,\n  `tn`,\n  `to`,\n  `tr`,\n  `ts`,\n  `uk`,\n  `ur`,\n  `uz`,\n  `ve`,\n  `vi`,\n  `xh`,\n  `zh`,\n  `zu`,\n]",
          "description": "All valid project locale codes. Sorted lexicographically."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceLocale",
          "declaration": {
            "name": "sourceLocale",
            "module": "src/localization/generated/locale-codes.ts"
          }
        },
        {
          "kind": "js",
          "name": "targetLocales",
          "declaration": {
            "name": "targetLocales",
            "module": "src/localization/generated/locale-codes.ts"
          }
        },
        {
          "kind": "js",
          "name": "allLocales",
          "declaration": {
            "name": "allLocales",
            "module": "src/localization/generated/locale-codes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/shared/loader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A simple loader component. It allows to display a same loader in different components.",
          "name": "OffWcLoader",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "off-wc-loader",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OffWcLoader",
          "declaration": {
            "name": "OffWcLoader",
            "module": "src/components/shared/loader.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "off-wc-loader",
          "declaration": {
            "name": "OffWcLoader",
            "module": "src/components/shared/loader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/shared/off-webcomponents-configuration.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Robotoff configuration element.\nIt is used to configure the robotoff parameters.",
          "name": "OffWebcomponentsConfiguration",
          "members": [
            {
              "kind": "field",
              "name": "robotoffConfiguration",
              "type": {
                "text": "RobotoffConfigurationOptions"
              },
              "default": "{\n    apiUrl: DEFAULT_ROBOTOFF_CONFIGURATION.apiUrl,\n    dryRun: DEFAULT_ROBOTOFF_CONFIGURATION.dryRun,\n    imgUrl: DEFAULT_ROBOTOFF_CONFIGURATION.imgUrl,\n  }",
              "description": "The robotoff configuration object.",
              "attribute": "robotoff-configuration"
            },
            {
              "kind": "field",
              "name": "languageCode",
              "type": {
                "text": "string | undefined"
              },
              "default": "DEFAULT_LANGUAGE_CODE",
              "description": "The language code we need to use for the app.",
              "attribute": "language-code"
            }
          ],
          "attributes": [
            {
              "name": "robotoff-api-url",
              "type": {
                "text": "RobotoffConfigurationOptions"
              },
              "default": "{\n    apiUrl: DEFAULT_ROBOTOFF_CONFIGURATION.apiUrl,\n    dryRun: DEFAULT_ROBOTOFF_CONFIGURATION.dryRun,\n    imgUrl: DEFAULT_ROBOTOFF_CONFIGURATION.imgUrl,\n  }",
              "description": "The robotoff configuration object.",
              "fieldName": "robotoffConfiguration"
            },
            {
              "name": "language-code",
              "type": {
                "text": "string | undefined"
              },
              "default": "DEFAULT_LANGUAGE_CODE",
              "description": "The language code we need to use for the app.",
              "resolveInitializer": {
                "module": "/src/constants"
              },
              "fieldName": "languageCode",
              "attribute": "language-code"
            },
            {
              "name": "robotoff-configuration",
              "type": {
                "text": "RobotoffConfigurationOptions"
              },
              "default": "{\n    apiUrl: DEFAULT_ROBOTOFF_CONFIGURATION.apiUrl,\n    dryRun: DEFAULT_ROBOTOFF_CONFIGURATION.dryRun,\n    imgUrl: DEFAULT_ROBOTOFF_CONFIGURATION.imgUrl,\n  }",
              "description": "The robotoff configuration object.",
              "attribute": "robotoff-api-url",
              "fieldName": "robotoffConfiguration"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "off-w-configuration",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OffWebcomponentsConfiguration",
          "declaration": {
            "name": "OffWebcomponentsConfiguration",
            "module": "src/components/shared/off-webcomponents-configuration.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "off-webcomponents-configuration",
          "declaration": {
            "name": "OffWebcomponentsConfiguration",
            "module": "src/components/shared/off-webcomponents-configuration.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/shared/zoomable-image.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A simple zoomable image component.\nIt allows to display an image that can be zoomed, and rotated.\nIt uses the panzoom library.",
          "name": "ZoomableImage",
          "members": [
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panzoom",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "currentZoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "current-zoom"
            },
            {
              "kind": "field",
              "name": "stepSize",
              "type": {
                "text": "number"
              },
              "default": "0.1",
              "attribute": "step-size"
            },
            {
              "kind": "field",
              "name": "minZoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "min-zoom"
            },
            {
              "kind": "field",
              "name": "maxZoom",
              "type": {
                "text": "number"
              },
              "default": "5",
              "attribute": "max-zoom"
            },
            {
              "kind": "field",
              "name": "rotation",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "{\n    width?: string\n    height?: string\n  }"
              },
              "default": "{\n    width: \"100%\",\n    height: \"30vh\",\n  }",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "initPanzoom"
            },
            {
              "kind": "method",
              "name": "rotateImage",
              "parameters": [
                {
                  "name": "rotation",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "src"
            },
            {
              "name": "current-zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "currentZoom"
            },
            {
              "name": "step-size",
              "type": {
                "text": "number"
              },
              "default": "0.1",
              "fieldName": "stepSize"
            },
            {
              "name": "min-zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "minZoom"
            },
            {
              "name": "max-zoom",
              "type": {
                "text": "number"
              },
              "default": "5",
              "fieldName": "maxZoom"
            },
            {
              "name": "size",
              "type": {
                "text": "{\n    width?: string\n    height?: string\n  }"
              },
              "default": "{\n    width: \"100%\",\n    height: \"30vh\",\n  }",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zoomable-image",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZoomableImage",
          "declaration": {
            "name": "ZoomableImage",
            "module": "src/components/shared/zoomable-image.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zoomable-image",
          "declaration": {
            "name": "ZoomableImage",
            "module": "src/components/shared/zoomable-image.ts"
          }
        }
      ]
    }
  ]
}
